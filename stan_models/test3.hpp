
// Code generated by stanc v2.26.0
#include <stan/model/model_header.hpp>
namespace test3_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 73, column 2 to column 31)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 74, column 2 to column 22)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 75, column 2 to column 22)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 99, column 2 to column 24)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 100, column 2 to column 24)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 102, column 2 to column 69)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 104, column 4 to column 47)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 103, column 2 to line 104, column 47)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 80, column 9 to column 10)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 80, column 12 to column 13)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 80, column 2 to column 19)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 82, column 11 to column 12)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 82, column 14 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 82, column 4 to column 70)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 83, column 4 to column 34)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 87, column 6 to column 39)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 86, column 4 to line 87, column 39)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 89, column 4 to column 32)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 81, column 2 to line 90, column 3)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 92, column 2 to column 30)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 93, column 2 to column 23)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 94, column 2 to column 23)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 96, column 2 to column 37)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 61, column 2 to column 17)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 62, column 2 to column 17)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 63, column 14 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 63, column 9 to column 10)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 63, column 2 to column 17)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 64, column 9 to column 10)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 64, column 2 to column 14)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 65, column 2 to column 22)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 66, column 19 to column 25)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 66, column 9 to column 10)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 66, column 2 to column 27)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 69, column 9 to column 10)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 69, column 2 to column 34)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 70, column 2 to column 20)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 73, column 18 to column 19)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 99, column 9 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 100, column 9 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 8, column 4 to column 22)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 9, column 4 to column 22)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 10, column 11 to column 13)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 10, column 15 to column 17)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 10, column 4 to column 21)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 11, column 4 to column 34)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 12, column 11 to column 20)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 12, column 4 to column 47)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 15, column 8 to line 16, column 77)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 14, column 22 to line 17, column 7)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 14, column 6 to line 17, column 7)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 13, column 20 to line 18, column 5)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 13, column 4 to line 18, column 5)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 19, column 4 to column 13)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 7, column 40 to line 20, column 3)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 30, column 4 to column 22)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 31, column 4 to column 22)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 32, column 11 to column 13)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 32, column 4 to column 18)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 34, column 13 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 34, column 17 to column 19)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 34, column 6 to column 25)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 35, column 13 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 35, column 6 to column 26)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 36, column 13 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 36, column 17 to column 19)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 36, column 6 to column 29)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 37, column 13 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 37, column 17 to column 19)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 37, column 6 to column 28)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 38, column 13 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 38, column 6 to column 23)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 39, column 13 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 39, column 17 to column 19)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 39, column 6 to column 28)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 40, column 13 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 40, column 17 to column 19)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 40, column 6 to column 32)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 41, column 13 to column 15)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 41, column 17 to column 19)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 41, column 6 to column 23)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 42, column 6 to column 55)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 44, column 8 to column 41)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 43, column 6 to line 44, column 41)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 45, column 6 to column 34)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 46, column 6 to column 47)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 47, column 6 to column 56)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 48, column 6 to column 61)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 49, column 6 to column 36)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 50, column 6 to column 50)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 51, column 6 to column 79)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 52, column 6 to column 54)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 54, column 6 to column 56)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 33, column 4 to line 55, column 5)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 56, column 4 to column 14)",
                                                      " (in '/Users/juhoyla-jaaski/Documents/university/aalto/PML/precise_gps/stan_models/test3.stan', line 29, column 33 to line 57, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, stan::value_type_t<T3__>,
T4__>, -1, -1>
L_cov_exp_quad_ARD(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x1,
                   const std::vector<Eigen::Matrix<T1__, -1, 1>>& x2,
                   const T2__& alpha, const T3__& rho_arg__,
                   const T4__& delta, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          stan::value_type_t<T3__>,
          T4__>;
  const auto& rho = to_ref(rho_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N1;
    N1 = std::numeric_limits<int>::min();
    
    current_statement__ = 41;
    N1 = size(x1);
    int N2;
    N2 = std::numeric_limits<int>::min();
    
    current_statement__ = 42;
    N2 = size(x2);
    current_statement__ = 43;
    validate_non_negative_index("K", "N1", N1);
    current_statement__ = 44;
    validate_non_negative_index("K", "N2", N2);
    Eigen::Matrix<local_scalar_t__, -1, -1> K;
    K = Eigen::Matrix<local_scalar_t__, -1, -1>(N1, N2);
    stan::math::fill(K, DUMMY_VAR__);
    
    local_scalar_t__ sq_alpha;
    sq_alpha = DUMMY_VAR__;
    
    current_statement__ = 46;
    sq_alpha = square(alpha);
    current_statement__ = 47;
    validate_non_negative_index("squared_rho", "size(rho)", size(rho));
    Eigen::Matrix<local_scalar_t__, -1, 1> squared_rho;
    squared_rho = Eigen::Matrix<local_scalar_t__, -1, 1>(size(rho));
    stan::math::fill(squared_rho, DUMMY_VAR__);
    
    current_statement__ = 48;
    assign(squared_rho, nil_index_list(), elt_multiply(rho, rho),
      "assigning variable squared_rho");
    current_statement__ = 53;
    for (int i = 1; i <= N1; ++i) {
      current_statement__ = 51;
      for (int j = 1; j <= N2; ++j) {
        current_statement__ = 49;
        assign(K,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          (sq_alpha *
            stan::math::exp(
              (-0.5 *
                dot_self(
                  elt_multiply(subtract(x1[(i - 1)], x2[(j - 1)]),
                    squared_rho))))), "assigning variable K");}}
    current_statement__ = 54;
    return K;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct L_cov_exp_quad_ARD_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__, T2__, stan::value_type_t<T3__>,
T4__>, -1, -1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x1,
           const std::vector<Eigen::Matrix<T1__, -1, 1>>& x2,
           const T2__& alpha, const T3__& rho, const T4__& delta,
           std::ostream* pstream__)  const 
{
return L_cov_exp_quad_ARD(x1, x2, alpha, rho, delta, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
stan::value_type_t<T4__>, stan::promote_args_t<T5__,
T6__>>, -1, 1>
gp_pred_rng(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x2,
            const T1__& y1_arg__,
            const std::vector<Eigen::Matrix<T2__, -1, 1>>& x1,
            const T3__& alpha, const T4__& rho_arg__, const T5__& sigma,
            const T6__& delta, RNG& base_rng__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__,
          T3__,
          stan::value_type_t<T4__>, stan::promote_args_t<T5__,
          T6__>>;
  const auto& y1 = to_ref(y1_arg__);
  const auto& rho = to_ref(rho_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int N1;
    N1 = std::numeric_limits<int>::min();
    
    current_statement__ = 56;
    N1 = rows(y1);
    int N2;
    N2 = std::numeric_limits<int>::min();
    
    current_statement__ = 57;
    N2 = size(x2);
    current_statement__ = 58;
    validate_non_negative_index("f2", "N2", N2);
    Eigen::Matrix<local_scalar_t__, -1, 1> f2;
    f2 = Eigen::Matrix<local_scalar_t__, -1, 1>(N2);
    stan::math::fill(f2, DUMMY_VAR__);
    
    {
      current_statement__ = 60;
      validate_non_negative_index("L_K", "N1", N1);
      current_statement__ = 61;
      validate_non_negative_index("L_K", "N1", N1);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_K;
      L_K = Eigen::Matrix<local_scalar_t__, -1, -1>(N1, N1);
      stan::math::fill(L_K, DUMMY_VAR__);
      
      current_statement__ = 63;
      validate_non_negative_index("K_div_y1", "N1", N1);
      Eigen::Matrix<local_scalar_t__, -1, 1> K_div_y1;
      K_div_y1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N1);
      stan::math::fill(K_div_y1, DUMMY_VAR__);
      
      current_statement__ = 65;
      validate_non_negative_index("k_x1_x2", "N1", N1);
      current_statement__ = 66;
      validate_non_negative_index("k_x1_x2", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, -1> k_x1_x2;
      k_x1_x2 = Eigen::Matrix<local_scalar_t__, -1, -1>(N1, N2);
      stan::math::fill(k_x1_x2, DUMMY_VAR__);
      
      current_statement__ = 68;
      validate_non_negative_index("v_pred", "N1", N1);
      current_statement__ = 69;
      validate_non_negative_index("v_pred", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, -1> v_pred;
      v_pred = Eigen::Matrix<local_scalar_t__, -1, -1>(N1, N2);
      stan::math::fill(v_pred, DUMMY_VAR__);
      
      current_statement__ = 71;
      validate_non_negative_index("f2_mu", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, 1> f2_mu;
      f2_mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N2);
      stan::math::fill(f2_mu, DUMMY_VAR__);
      
      current_statement__ = 73;
      validate_non_negative_index("cov_f2", "N2", N2);
      current_statement__ = 74;
      validate_non_negative_index("cov_f2", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, -1> cov_f2;
      cov_f2 = Eigen::Matrix<local_scalar_t__, -1, -1>(N2, N2);
      stan::math::fill(cov_f2, DUMMY_VAR__);
      
      current_statement__ = 76;
      validate_non_negative_index("diag_delta", "N2", N2);
      current_statement__ = 77;
      validate_non_negative_index("diag_delta", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, -1> diag_delta;
      diag_delta = Eigen::Matrix<local_scalar_t__, -1, -1>(N2, N2);
      stan::math::fill(diag_delta, DUMMY_VAR__);
      
      current_statement__ = 79;
      validate_non_negative_index("K", "N1", N1);
      current_statement__ = 80;
      validate_non_negative_index("K", "N1", N1);
      Eigen::Matrix<local_scalar_t__, -1, -1> K;
      K = Eigen::Matrix<local_scalar_t__, -1, -1>(N1, N1);
      stan::math::fill(K, DUMMY_VAR__);
      
      current_statement__ = 82;
      assign(K, nil_index_list(),
        L_cov_exp_quad_ARD(x1, x1, alpha, rho, delta, pstream__),
        "assigning variable K");
      current_statement__ = 84;
      for (int n = 1; n <= N1; ++n) {
        current_statement__ = 83;
        assign(K,
          cons_list(index_uni(n), cons_list(index_uni(n), nil_index_list())),
          (rvalue(K,
             cons_list(index_uni(n),
               cons_list(index_uni(n), nil_index_list())), "K") +
            square(sigma)), "assigning variable K");}
      current_statement__ = 85;
      assign(L_K, nil_index_list(), cholesky_decompose(K),
        "assigning variable L_K");
      current_statement__ = 86;
      assign(K_div_y1, nil_index_list(), mdivide_left_tri_low(L_K, y1),
        "assigning variable K_div_y1");
      current_statement__ = 87;
      assign(K_div_y1, nil_index_list(),
        transpose(
          mdivide_right_tri_low(transpose(stan::model::deep_copy(K_div_y1)),
            L_K)), "assigning variable K_div_y1");
      current_statement__ = 88;
      assign(k_x1_x2, nil_index_list(),
        L_cov_exp_quad_ARD(x1, x2, alpha, rho, delta, pstream__),
        "assigning variable k_x1_x2");
      current_statement__ = 89;
      assign(f2_mu, nil_index_list(), multiply(transpose(k_x1_x2), K_div_y1),
        "assigning variable f2_mu");
      current_statement__ = 90;
      assign(v_pred, nil_index_list(), mdivide_left_tri_low(L_K, k_x1_x2),
        "assigning variable v_pred");
      current_statement__ = 91;
      assign(cov_f2, nil_index_list(),
        subtract(L_cov_exp_quad_ARD(x2, x2, alpha, rho, delta, pstream__),
          multiply(transpose(v_pred), v_pred)), "assigning variable cov_f2");
      current_statement__ = 92;
      assign(diag_delta, nil_index_list(),
        diag_matrix(rep_vector(delta, N2)), "assigning variable diag_delta");
      current_statement__ = 93;
      assign(f2, nil_index_list(),
        multi_normal_rng(f2_mu, add(cov_f2, diag_delta), base_rng__),
        "assigning variable f2");
    }
    current_statement__ = 95;
    return f2;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct gp_pred_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
stan::value_type_t<T4__>, stan::promote_args_t<T5__,
T6__>>, -1, 1>
operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& x2, const T1__& y1,
           const std::vector<Eigen::Matrix<T2__, -1, 1>>& x1,
           const T3__& alpha, const T4__& rho, const T5__& sigma,
           const T6__& delta, RNG& base_rng__, std::ostream* pstream__)  const 
{
return gp_pred_rng(x2, y1, x1, alpha, rho, sigma, delta, base_rng__,
         pstream__);
}
};

class test3_model final : public model_base_crtp<test3_model> {

 private:
  int N;
  int D;
  std::vector<Eigen::Matrix<double, -1, 1>> x;
  Eigen::Matrix<double, -1, 1> y;
  int N_test;
  std::vector<Eigen::Matrix<double, -1, 1>> x_test;
  Eigen::Matrix<double, -1, 1> mu;
  double delta;
 
 public:
  ~test3_model() { }
  
  inline std::string model_name() const final { return "test3_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.0", "stancflags = "};
  }
  
  
  test3_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "test3_model_namespace::test3_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 24;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 24;
      current_statement__ = 24;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 25;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 25;
      current_statement__ = 25;
      check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 26;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 27;
      validate_non_negative_index("x", "D", D);
      current_statement__ = 28;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N, D));
      x = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(D));
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 28;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 28;
        pos__ = 1;
        current_statement__ = 28;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 28;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 28;
            assign(x,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_flat__[(pos__ - 1)], "assigning variable x");
            current_statement__ = 28;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 29;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 30;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 30;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 30;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 30;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 31;
      context__.validate_dims("data initialization","N_test","int",
          context__.to_vec());
      N_test = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "N_test", N_test, 1);
      current_statement__ = 32;
      validate_non_negative_index("x_test", "N_test", N_test);
      current_statement__ = 33;
      validate_non_negative_index("x_test", "D", D);
      current_statement__ = 34;
      context__.validate_dims("data initialization","x_test","double",
          context__.to_vec(N_test, D));
      x_test = std::vector<Eigen::Matrix<double, -1, 1>>(N_test, Eigen::Matrix<double, -1, 1>(D));
      stan::math::fill(x_test, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_test_flat__;
        current_statement__ = 34;
        assign(x_test_flat__, nil_index_list(), context__.vals_r("x_test"),
          "assigning variable x_test_flat__");
        current_statement__ = 34;
        pos__ = 1;
        current_statement__ = 34;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 34;
          for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
            current_statement__ = 34;
            assign(x_test,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_test_flat__[(pos__ - 1)], "assigning variable x_test");
            current_statement__ = 34;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 35;
      validate_non_negative_index("mu", "N", N);
      current_statement__ = 36;
      mu = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 36;
      assign(mu, nil_index_list(), rep_vector(0, N), "assigning variable mu");
      current_statement__ = 37;
      delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 37;
      delta = 1e-9;
      current_statement__ = 38;
      validate_non_negative_index("precision", "D", D);
      current_statement__ = 39;
      validate_non_negative_index("f_pred", "N_test", N_test);
      current_statement__ = 40;
      validate_non_negative_index("y_pred", "N_test", N_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += D;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "test3_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> precision;
      precision = Eigen::Matrix<local_scalar_t__, -1, 1>(D);
      stan::math::fill(precision, DUMMY_VAR__);
      
      current_statement__ = 1;
      precision = in__.vector(D);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(precision, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(precision[(sym1__ - 1)], 0, lp__),
            "assigning variable precision");
        } else {
          current_statement__ = 1;
          assign(precision, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(precision[(sym1__ - 1)], 0),
            "assigning variable precision");
        }}
      local_scalar_t__ alpha;
      alpha = DUMMY_VAR__;
      
      current_statement__ = 2;
      alpha = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        alpha = stan::math::lb_constrain(alpha, 0, lp__);
      } else {
        current_statement__ = 2;
        alpha = stan::math::lb_constrain(alpha, 0);
      }
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 3;
      sigma = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 3;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      {
        current_statement__ = 9;
        validate_non_negative_index("L_K", "N", N);
        current_statement__ = 10;
        validate_non_negative_index("L_K", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_K;
        L_K = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        stan::math::fill(L_K, DUMMY_VAR__);
        
        {
          current_statement__ = 12;
          validate_non_negative_index("K", "N", N);
          current_statement__ = 13;
          validate_non_negative_index("K", "N", N);
          Eigen::Matrix<local_scalar_t__, -1, -1> K;
          K = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
          stan::math::fill(K, DUMMY_VAR__);
          
          current_statement__ = 14;
          assign(K, nil_index_list(),
            L_cov_exp_quad_ARD(x, x, alpha, precision, delta, pstream__),
            "assigning variable K");
          local_scalar_t__ sq_sigma;
          sq_sigma = DUMMY_VAR__;
          
          current_statement__ = 15;
          sq_sigma = square(sigma);
          current_statement__ = 17;
          for (int n1 = 1; n1 <= N; ++n1) {
            current_statement__ = 16;
            assign(K,
              cons_list(index_uni(n1),
                cons_list(index_uni(n1), nil_index_list())),
              (rvalue(K,
                 cons_list(index_uni(n1),
                   cons_list(index_uni(n1), nil_index_list())), "K") +
                sq_sigma), "assigning variable K");}
          current_statement__ = 18;
          assign(L_K, nil_index_list(), cholesky_decompose(K),
            "assigning variable L_K");
        }
        current_statement__ = 20;
        lp_accum__.add(inv_gamma_lpdf<propto__>(precision, 5, 5));
        current_statement__ = 21;
        lp_accum__.add(std_normal_lpdf<propto__>(alpha));
        current_statement__ = 22;
        lp_accum__.add(std_normal_lpdf<propto__>(sigma));
        current_statement__ = 23;
        lp_accum__.add(multi_normal_cholesky_lpdf<propto__>(y, mu, L_K));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "test3_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      Eigen::Matrix<double, -1, 1> precision;
      precision = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(precision, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      precision = in__.vector(D);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 1;
        assign(precision, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(precision[(sym1__ - 1)], 0),
          "assigning variable precision");}
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      alpha = in__.scalar();
      current_statement__ = 2;
      alpha = stan::math::lb_constrain(alpha, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = in__.scalar();
      current_statement__ = 3;
      sigma = stan::math::lb_constrain(sigma, 0);
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        vars__.emplace_back(precision[(sym1__ - 1)]);}
      vars__.emplace_back(alpha);
      vars__.emplace_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> f_pred;
      f_pred = Eigen::Matrix<double, -1, 1>(N_test);
      stan::math::fill(f_pred, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> y_pred;
      y_pred = Eigen::Matrix<double, -1, 1>(N_test);
      stan::math::fill(y_pred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(f_pred, nil_index_list(),
        gp_pred_rng(x_test, y, x, alpha, precision, sigma,
          delta, base_rng__, pstream__), "assigning variable f_pred");
      current_statement__ = 8;
      for (int n2 = 1; n2 <= N_test; ++n2) {
        current_statement__ = 7;
        assign(y_pred, cons_list(index_uni(n2), nil_index_list()),
          normal_rng(f_pred[(n2 - 1)], sigma, base_rng__),
          "assigning variable y_pred");}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        vars__.emplace_back(f_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        vars__.emplace_back(y_pred[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> precision;
      precision = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(precision, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> precision_flat__;
        current_statement__ = 1;
        assign(precision_flat__, nil_index_list(),
          context__.vals_r("precision"),
          "assigning variable precision_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 1;
          assign(precision, cons_list(index_uni(sym1__), nil_index_list()),
            precision_flat__[(pos__ - 1)], "assigning variable precision");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> precision_free__;
      precision_free__ = Eigen::Matrix<double, -1, 1>(D);
      stan::math::fill(precision_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 1;
        assign(precision_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(precision[(sym1__ - 1)], 0),
          "assigning variable precision_free__");}
      double alpha;
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      double alpha_free__;
      alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      alpha_free__ = stan::math::lb_free(alpha, 0);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        vars__.emplace_back(precision_free__[(sym1__ - 1)]);}
      vars__.emplace_back(alpha_free__);
      vars__.emplace_back(sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("precision");
    names__.emplace_back("alpha");
    names__.emplace_back("sigma");
    names__.emplace_back("f_pred");
    names__.emplace_back("y_pred");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(D)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_test)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_test)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "precision" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_pred" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "precision" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "alpha");
    param_names__.emplace_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f_pred" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_pred" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"precision\",\"type\":{\"name\":\"vector\",\"length\":" << D << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f_pred\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"precision\",\"type\":{\"name\":\"vector\",\"length\":" << D << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f_pred\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"vector\",\"length\":" << N_test << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = test3_model_namespace::test3_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return test3_model_namespace::profiles__;
}

#endif


